/*
*
* PMlib - Performance Monitor library
*
* Copyright (c) 2010-2011 VCAD System Research Program, RIKEN.
* All rights reserved.
*
* Copyright (c) 2012-2015 Advanced Institute for Computational Science, RIKEN.
* All rights reserved.
*
*/


This INSTALL file contains the summary information regarding the installation
options and runtime variables, as well as the installation examples on
Intel Xeon server, K computer/FX100 system, Apple Mac PCs.

Typical installation will be composed of three steps.

1. Confirm that the software requirement is met.
2. Obtain the the package tar ball and unpack it under the temporary directory.
3. Configure and Make the related files.


1. SOFTWARE REQUIREMENT
=======================
Before starting the installation, make sure that the following software
has been made ready on the platform.
- C++/C/Fortran compiler.
- MPI library (option)
- PAPI library (option)
- OTF library (option)
Although MPI and PAPI libraries are optional, they are frequently used
in the application, and are recommended to be included.


2. PACKAGE PLACEMENT
====================
Download the PMlib package tar.gz file from the distribution repository.
	http://avr-aics-riken.github.io/PMlib/
Unpack the downloaded file under the temporary directory.
$ tar -zxf avr-aics-riken-PMlib-*.tar.gz


3. CONFIGURE and MAKE
=====================
After unpacking the PMlib package tar.gz, follow the configure and make steps
as below.

$ cd ./BUILD_DIR
$ ../configure [options]
$ make
$ sudo make install

The configure command requires a small number of options.
The typically specified configure options are explained below.


Configure options:

--host=HOSTNAME
   Cross-compilation target.  Use this option if cross-compilation is needed.
   HOSTNAME should be the name of target platform.

--prefix=INSTALL_DIR
   Installation directory of PMlib.
   Specify this option with INSTALL_DIR value pointing to the directory where
   PMlib is installed.  The default installion directory is /usr/local/PMlib.

--with-comp=("INTEL"|"FJ"|"GNU"|"CLANG")
   The compiler choice.  Set INTEL for Intel compiler, FJ for Fujitsu compiler,
   GNU for GNU compiler, CLANG for Clang/LLVM compiler.
   This option must be set explicitly.

--with-example=("no"|"yes")
   Building the example programs.
   Set "yes" to build example programs. Default setting is "no".

--with-impi=IntelMPI_DIR
   If you use IntelMPI library, specify this option with IntelMPI_DIR value
   pointing to the IntelMPI library installed directory.
   If you use MPI wrapper compilers such as mpicxx/mpicc/mpif90 for CXX/CC/F90,
   the MPI library is automatically detected, and this options can be omitted.
   This option is required only when using native compilers.

--with-mpich=MPICH_DIR
   If you use MPICH library, specify this option with MPICH_DIR value
   pointing to the MPICH library installed directory.
   If you use MPI wrapper compilers such as mpicxx/mpicc/mpif90 for CXX/CC/F90,
   the MPI library is automatically detected, and this options can be omitted.
   This option is required only when using native compilers.

--with-ompi=OPENMPI_DIR
   If you use OpenMPI library, specify this option with OPENMPI_DIR value
   pointing to the OpenMPI library installed directory.
   If you use MPI wrapper compilers such as mpicxx/mpicc/mpif90 for CXX/CC/F90,
   the MPI library is automatically detected, and this options can be omitted.
   This option is required only when using native compilers.

--with-papi=PAPI_DIR or --with-papi="yes"
   If you use PAPI library, specify this option with PAPI_DIR value
   pointing to the PAPI library installed directory.
   In cross-compile installation, there can be multiple PAPI libraries on the
   system, one for the current platform and another for the target platform.
   See examples in 4. INSTALLATION EXAMPLES section.
   In many cases, --with-papi="yes" can detect the correct path.

--with-otf=OTF_DIR
   If you use OTF library, specify this option with OTF_DIR value
   pointing to the OTF library installed directory.

CXX=CXX_COMPILER
   Specify a native C++ compiler, e.g., g++, icpc, c++ or MPI wrapper
   compiler, e.g. mpicxx.

CXXFLAGS=CXX_OPTIONS
   Specify compiler options.

CC=CC_COMPILER
   Specify a native C compiler, e.g., gcc, icc, clang or MPI wrapper
   compiler, e.g. mpicc.

CFLAGS=CC_OPTIONS
   Specify compiler options.

F90=FORTRAN90_COMPILER
   Specify a native fortran90 compiler, e.g., gfortran, ifort, or MPI wrapper
   compiler, e.g. mpif90.  FC=... and F90=... has the same effect.

F90FLAGS=FORTRAN90_OPTIONS
   Specify compiler options.  FCFLAGS=... and F90FLAGS=...  has the same effect.

-D"some_macro_value"
   The -D options can be added to CXXFLAGS/CFLAGS/F90FLAGS as macro
   definition used in PMlib source program.
   In general, the -D options can be added by the user.
   Some -D options are automatically generated by configure command itself
   and are passed to CXXFLAGS/CFLAGS/F90FLAGS.

-DK_COMPUTER
   This is a special macro used to identify K computer.
   This macro must be given to CXXFLAGS/CFLAGS/F90FLAGS by the user when
   installing PMlib on K computer. K has old PAPI/HWPC version that is not
   compatible with the recent PAPI versions. See examples in section 4.3 below.


4.  INSTALLATION EXAMPLES
=========================
Some installation examples on Intel Xeon server, K computer/FX100 system,
Apple Mac PCs are shown below.


4.1 Intel Xeon server - INTEL compiler
======================================
Before the installation, the user should decide the INSTALL_DIR path.
Also, PAPI_DIR path should be decided according to the system.
	$ INSTALL_DIR=${HOME}/local/PMlib
	$ PAPI_DIR=/usr/local/papi/papi-5.2.0/intel

## Serial version - minimum options for a quick check

$ ../configure --with-comp=INTEL \
               --prefix=${INSTALL_DIR} \
               CXX=icpc \
               CC=icc \
               F90=ifort \
               F90FLAGS="-fpp"

## Serial version - additional options including example, PAPI/HWPC, openmp

$ ../configure --with-comp=INTEL \
               --with-example=yes \
               --with-papi=${PAPI_DIR} \
               --prefix=${INSTALL_DIR} \
               CXX=icpc \
               CXXFLAGS="-O3 -openmp" \
               CC=icc \
               CFLAGS="-O3 -openmp" \
               F90=ifort \
               F90FLAGS="-fpp -O3 -openmp"

## MPI version - using wrapper commands(mpicxx, mpicc, mpif90) for Intel MPI.

$ ../configure --with-comp=INTEL \
               --with-example=yes \
               --with-papi=${PAPI_DIR} \
               --prefix=${INSTALL_DIR} \
               --with-impi \
               CXX=mpicxx \
               CXXFLAGS="-O3 -openmp" \
               CC=mpicc \
               CFLAGS="-O3 -openmp" \
               F90=mpif90 \
               F90FLAGS="-fpp -O3 -openmp" 

## MPI version - using bare compilers, linking OpenMPI instead of Intel MPI

$ ../configure --with-comp=INTEL \
               --with-example=yes \
               --with-papi=${PAPI_DIR} \
               --prefix=${INSTALL_DIR} \
               --with-ompi=/opt/openmpi \
               CXX=icpc \
               CXXFLAGS="-O3 -openmp" \
               CC=icc \
               CFLAGS="-O3 -openmp" \
               F90=ifort \
               F90FLAGS="-fpp -O3 -openmp"


4.2 Intel Xeon server - GNU compiler
====================================
Before the installation, the user should decide the INSTALL_DIR path.
Also, PAPI_DIR path should be decided according to the system.
	$ INSTALL_DIR=${HOME}/local/PMlib
	$ PAPI_DIR=/usr/local/papi/papi-5.2.0/gnu

## Serial version with basic options for example, openmp

$ ../configure --with-comp=GNU \
               --with-example=yes \
               --with-papi=${PAPI_DIR} \
               --prefix=${INSTALL_DIR} \
               CXX=g++ \
               CXXFLAGS="-O3 -fopenmp" \
               CC=gcc \
               CFLAGS="-O3 -fopenmp" \
               F90=gfortran \
               F90FLAGS="-cpp -O3 -fopenmp --free-line-length-none"

## MPI version using wrapper commands (mpicxx, mpicc, mpif90)

$ ../configure --with-comp=GNU \
               --with-example=yes \
               --with-papi=${PAPI_DIR} \
               --prefix=${INSTALL_DIR} \
               CXX=mpicxx \
               CXXFLAGS="-O3 -fopenmp" \
               CC=mpicc \
               CFLAGS="-O3 -fopenmp" \
               F90=mpif90 \
               F90FLAGS="-cpp -O3 -fopenmp --free-line-length-none"


4.3 FUJITSU compiler / K computer
=====================================
Remark that -host option is needed for cross-compiling on login node.
Remark that -DK_COMPUTER is added in CXXFLAGS/CFLAGS/FCFLAGS.
PAPI library for K computer under /opt/FJSVXosDevkit/sparc64fx/V01L02E07
is automatically identified.

## Serial version - building on login node

$ ../configure --with-comp=FJ \
               --with-example=yes \
               --with-papi=yes \
               --prefix=${INSTALL_DIR} \
               --host=sparc64-unknown-linux-gnu \
               CXX=FCCpx \
               CXXFLAGS="-Kfast,openmp -Nrt_notune -Nfjcex -DK_COMPUTER -w" \
               CC=fccpx \
               CFLAGS="-Kfast,openmp -Nrt_notune -DK_COMPUTER -w" \
               FC=frtpx \
               FCFLAGS="-Cpp -Kfast,openmp -Nrt_notune -DK_COMPUTER -Knooptmsg"

## MPI version - building on login node

$ ../configure --with-comp=FJ \
               --with-example=yes \
               --with-papi=yes \
               --prefix=${INSTALL_DIR} \
               --host=sparc64-unknown-linux-gnu \
               -DK_COMPUTER \
               CXX=mpiFCCpx \
               CXXFLAGS="-Kfast,openmp -Nrt_notune -Nfjcex -DK_COMPUTER -w" \
               CC=mpifccpx \
               CFLAGS="-Kfast,openmp -Nrt_notune -DK_COMPUTER -w" \
               FC=mpifrtpx \
               FCFLAGS="-Cpp -Kfast,openmp -Nrt_notune -DK_COMPUTER -Knooptmsg"


4.4 FUJITSU compiler / FX100 system
=====================================
Remark that -host option is needed for cross-compiling on login node.
PAPI library for FX100 system under /opt/FJSVXosDevkit/sparc64fx/rfs/usr/lib64
is automatically identified.

## Serial version - building on login node

$ ../configure --with-comp=FJ \
               --with-example=yes \
               --with-papi=yes \
               --prefix=${INSTALL_DIR} \
               --host=sparc64-unknown-linux-gnu \
               CXX=FCCpx \
               CXXFLAGS="-Kfast,openmp -Nrt_notune -Nfjcex -w" \
               CC=fccpx \
               CFLAGS="-Kfast,openmp -Nrt_notune -w" \
               FC=frtpx \
               FCFLAGS="-Cpp -Kfast,openmp -Nrt_notune -Knooptmsg"

## MPI version - building on login node

$ ../configure --with-comp=FJ \
               --with-example=yes \
               --with-papi=yes \
               --prefix=${INSTALL_DIR} \
               --host=sparc64-unknown-linux-gnu \
               CXX=mpiFCCpx \
               CXXFLAGS="-Kfast,openmp -Nrt_notune -Nfjcex -w" \
               CC=mpifccpx \
               CFLAGS="-Kfast,openmp -Nrt_notune -w" \
               FC=mpifrtpx \
               FCFLAGS="-Cpp -Kfast,openmp -Nrt_notune -Knooptmsg"


4.5 Apple Mac OSX LLVM/clang compiler
=====================================
Remark that PAPI/HWPC is not supported on Apple Mac OSX.

## Serial version

###  minimum options. note: c++ points to clang++, cc points to clang
INSTALL_DIR=${HOME}/local/PMlib
$ ../configure --prefix=${INSTALL_DIR} \
               --with-papi=none \
               --with-example=yes \
               CXX=c++ \
               CXXFLAGS="" \
               CC=cc  \
               CFLAGS=""  \
               FC=gfortran \
               FCFLAGS="-cpp"


## MPI version (OpenMPI wrapper)
INSTALL_DIR=${HOME}/local/PMlib
$ ../configure --prefix=${INSTALL_DIR} \
               --with-papi=none \
               --with-example=yes \
               --with-ompi=/opt/openmpi \
               CXX=mpicxx \
               CXXFLAGS="" \
               CC=mpicc  \
               CFLAGS=""  \
               FC=mpifort \
               FCFLAGS="-cpp"

If you try to install process again, execute 'make distclean' then configure.


4.6 Other platforms
===================

Refer to Makefile_hand hand for manually prepare the Makefiles for
a system not covered in the previous sections.
Edit environmental variables in a Makefile_hand file for a target machine.


5. RUNNING THE APPLICATION WITH PMLIB
=====================================

There are several documents explaining how to run the application with PMlib,
and how to understand the output information.
Currently, they are all written in Japanese.

doc/PMlib.pdf  : detail user guide
doc/thtorial/PMlib-Getting-Started.pdf 			: Quick start guide
doc/thtorial/Tutorial-slide1-overview.pdf		: PMlib overview
doc/thtorial/Tutorial-slide2-installation.pdf	: PMlib installation


6. RUN TIME ENVIRONMENT VARIABLES
=================================
When running applications linked with PMlib, the following
environment variables can be set to the shell.

HWPC_CHOOSER=(FLOPS|BANDWIDTH|VECTOR|CACHE|CYCLE)
  If this environment variable is set, PMlib automatically detects
  the PAPI based hardware counters.
  If this environment variable is not set, the HWPC counters are not reported.

OTF_TRACING=(off|on|full)
  If this environment variable is set, PMlib automatically generates
  the Open Trace Format files for post processing.
  There will be three type of OTF files.
  ${OTF_FILENAME}.otf
  ${OTF_FILENAME}.0.def
  ${OTF_FILENAME}.(1|2|..|N).events
  See the next environment variable OTF_FILENAME.
  If the value is "off" or not defined, the OTF files are not produced.
  If the value is "on", the OTF files will contain the timer information only.
  If the value is "full", the OTF files will contain the counter information
  as well as the timer information.
  Remark that OTF_TRACING=full may yield the heavy overhead, if the measuring
  sections are repeated many times.

OTF_FILENAME="some file name"
  The value of ${OTF_FILENAME} is used to prefix the OTF file names if the
  value of previous ${OTF_TRACING} has been set to "on" or "full".
  If this environment variable is not set, the default value of
  "pmlib_optional_otf_files" is used to prefix the OTF file names.
